# Copyright (C) 2024 Ningqi Wang (0xf3cd) <https://github.com/0xf3cd>

from datetime import date, datetime
from typing import Union, Protocol, runtime_checkable

from ..Defines import Jieqi
from .CalendarDefines import CalendarType, CalendarDate


@runtime_checkable
class CalendarUtilsProtocol(Protocol):
  '''
  The protocol that all CalendarUtils classes conform to.
  
  Currently, only HKO-data-based calendar utils are supported/implemented, which is at
  day-level precision, meaning that we are unable to know the accurate time of Jieqis.

  In the future, I plan to implement a C++-based calendar utils, using astronomical algorithms.
  With that, it becomes possible to know the accurate time of Jieqis.

  Creating this protocol just to ensure the smooth migration to future C++-based calendar utils.
  '''
  @staticmethod
  def get_min_supported_date(date_type: CalendarType) -> CalendarDate: ...
  @staticmethod
  def get_max_supported_date(date_type: CalendarType) -> CalendarDate: ...
  @staticmethod
  def is_valid_solar_date(d: CalendarDate) -> bool: ...
  @staticmethod
  def is_valid_lunar_date(d: CalendarDate) -> bool: ...
  @staticmethod
  def is_valid_ganzhi_date(d: CalendarDate) -> bool: ...
  @staticmethod
  def is_valid(d: CalendarDate) -> bool: ...
  @staticmethod
  def days_counts_in_ganzhi_year(ganzhi_year: int) -> list[int]: ...
  @staticmethod
  def lunar_to_solar(lunar_date: CalendarDate) -> CalendarDate: ...
  @staticmethod
  def solar_to_lunar(solar_date: CalendarDate) -> CalendarDate: ...
  @staticmethod
  def ganzhi_to_solar(ganzhi_date: CalendarDate) -> CalendarDate: ...
  @staticmethod
  def solar_to_ganzhi(solar_date: CalendarDate) -> CalendarDate: ...
  @staticmethod
  def lunar_to_ganzhi(lunar_date: CalendarDate) -> CalendarDate: ...
  @staticmethod
  def ganzhi_to_lunar(ganzhi_date: CalendarDate) -> CalendarDate: ...
  @staticmethod
  def to_solar(d: Union[date, CalendarDate]) -> CalendarDate: ...
  @staticmethod
  def to_lunar(d: Union[date, CalendarDate]) -> CalendarDate: ...
  @staticmethod
  def to_ganzhi(d: Union[date, CalendarDate]) -> CalendarDate: ...
  @staticmethod
  def to_date(d: Union[date, CalendarDate]) -> date: ...
  @staticmethod
  def jieqi_date(solar_year: int, jieqi: Jieqi) -> date: ...
  @staticmethod
  def jieqi_moment(solar_year: int, jieqi: Jieqi) -> datetime: ...
  @staticmethod
  def prev_jie(dt: datetime) -> tuple[Jieqi, datetime]: ...
  @staticmethod
  def next_jie(dt: datetime) -> tuple[Jieqi, datetime]: ...
